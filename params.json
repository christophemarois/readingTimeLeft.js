{"name":"Readingtimeleft.js","tagline":"jQuery plugin that tells you how many minutes there are left to read in a piece of text.","body":"readingTimeLeft.js\r\n================\r\n\r\nA lightweight and ultra-performant jQuery plugin that tells you how many minutes there are left to read in a piece of text. Check out the [demo]() and send me love.\r\n\r\nInstallation\r\n----------------\r\n- Get the latest release from [releases/tags](https://github.com/christophemarois/readingTimeLeft/releases) or by running `bower install readingTimeLeft`\r\n- Copy or link to either `readingTimeLeft.js` or `readingTimeLeft.min.js` from the `lib` folder to your folder containing your scripts\r\n- Add it after you include jQuery\r\n- You're ready to go!\r\n\r\nUsage\r\n----------------\r\n<a name=\"bu\"/>\r\n#### Basic usage\r\n\r\n```javascript\r\n$('#my-container').readingTimeLeft({ options... })\r\n```\r\n\r\n`readingTimeLeft()` stores the quantity of words left in every child of the container it has been called on. When scrolling, the plugin detects which children are visible in the viewport and a `timechange` event will be called on the container, containing a computed `minutesLeft` argument, which you can use to update your UI in the way you want to.\r\n\r\n###### Example:\r\n```javascript\r\n$('#my-container')\r\n  .readingTimeLeft()\r\n  .on('timechange', function(e, minutesLeft) {\r\n\r\n    console.log(minutesLeft);\r\n    // => 3.453984726\r\n\r\n    var text;\r\n    if (minutesLeft < 1) {\r\n      text = 'less than 1 min'\r\n    } else {\r\n      text = Math.round(minutesLeft) + ' min';\r\n    }\r\n\r\n    window.document.title = text;\r\n    // => 3 minutes left\r\n\r\n  });\r\n```\r\n\r\nThis will update the document title to the amount of time left to read in realtime.\r\n\r\n#### Advanced usage\r\n\r\n`readingTimeLeft()` can be customized with three options:\r\n\r\n`stepSelector`: what type of children to look for in the container.  \r\n`wordsPerMinute`: how many wpm we are expecting the user to read at.  \r\n`eventName`: the name of the event that will be triggered on the container. It is also appended as a namespace for the `scroll` and `resize` events bound on `window`.\r\n\r\n###### Defaults:\r\n- `stepSelector` defaults to `*`\r\n- `wordsPerMinute` defaults to `270`\r\n- `eventName` defaults to `timechange`\r\n\r\n###### Example:\r\n```javascript\r\n$('#my-container').readingTimeLeft({\r\n  // Will only select <p> and <blockquote> children\r\n  stepSelector: 'p, blockquote',\r\n  // Consider 400 words per minute of reading time\r\n  wordsPerMinute: 400,\r\n  // Trigger an event named “minutesleft”\r\n  eventName: \"minutesleft\"\r\n}).on('minutesleft', function (e, minutesLeft) {\r\n  console.log(minutesLeft);\r\n});\r\n```\r\n\r\n#### Destroy instance\r\n\r\nTo destroy an instance of `readingTimeLeft()`, call:\r\n\r\n```javascript\r\n  $('#my-container').trigger('destroy.readingTimeLeft');\r\n```\r\n\r\nThis will remove the data attributes on the children, plus the `scroll` and `resize` event on `window`.\r\n\r\n## Support\r\n__Chrome, Firefox 3.0+, IE6+, Safari 4.0+, Opera 10.0+__\r\n\r\nChangelog\r\n----------------\r\n`1.0`\r\n\r\n- Initial release\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}